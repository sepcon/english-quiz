// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	scoring "github.com/sepcon/quizprob/pkg/model/scoring_service"
	mock "github.com/stretchr/testify/mock"
)

// UserScoreDB is an autogenerated mock type for the UserScoreDB type
type UserScoreDB struct {
	mock.Mock
}

// CreateQuiz provides a mock function with given fields: quizID
func (_m *UserScoreDB) CreateQuiz(quizID string) error {
	ret := _m.Called(quizID)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuiz")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(quizID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrInitUserStatus provides a mock function with given fields: quizUser
func (_m *UserScoreDB) GetOrInitUserStatus(quizUser scoring.QuizUser) (int32, error) {
	ret := _m.Called(quizUser)

	if len(ret) == 0 {
		panic("no return value specified for GetOrInitUserStatus")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(scoring.QuizUser) (int32, error)); ok {
		return rf(quizUser)
	}
	if rf, ok := ret.Get(0).(func(scoring.QuizUser) int32); ok {
		r0 = rf(quizUser)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(scoring.QuizUser) error); ok {
		r1 = rf(quizUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserScore provides a mock function with given fields: quizUser, score
func (_m *UserScoreDB) UpdateUserScore(quizUser scoring.QuizUser, score int32) error {
	ret := _m.Called(quizUser, score)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scoring.QuizUser, int32) error); ok {
		r0 = rf(quizUser, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserScoreDB creates a new instance of UserScoreDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserScoreDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserScoreDB {
	mock := &UserScoreDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
