// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	quiz "github.com/sepcon/quizprob/pkg/model/quiz"
	mock "github.com/stretchr/testify/mock"
)

// Ranker is an autogenerated mock type for the Ranker type
type Ranker struct {
	mock.Mock
}

// CreateQuiz provides a mock function with given fields: quizID, leaderboardSize
func (_m *Ranker) CreateQuiz(quizID string, leaderboardSize uint32) error {
	ret := _m.Called(quizID, leaderboardSize)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuiz")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32) error); ok {
		r0 = rf(quizID, leaderboardSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLeaderboard provides a mock function with given fields: quizid
func (_m *Ranker) GetLeaderboard(quizid string) (*quiz.Leaderboard, error) {
	ret := _m.Called(quizid)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboard")
	}

	var r0 *quiz.Leaderboard
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*quiz.Leaderboard, error)); ok {
		return rf(quizid)
	}
	if rf, ok := ret.Get(0).(func(string) *quiz.Leaderboard); ok {
		r0 = rf(quizid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quiz.Leaderboard)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(quizid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRank provides a mock function with given fields: quizUser
func (_m *Ranker) GetUserRank(quizUser quiz.QuizUser) (quiz.RankType, error) {
	ret := _m.Called(quizUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRank")
	}

	var r0 quiz.RankType
	var r1 error
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) (quiz.RankType, error)); ok {
		return rf(quizUser)
	}
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) quiz.RankType); ok {
		r0 = rf(quizUser)
	} else {
		r0 = ret.Get(0).(quiz.RankType)
	}

	if rf, ok := ret.Get(1).(func(quiz.QuizUser) error); ok {
		r1 = rf(quizUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserScore provides a mock function with given fields: quizUser
func (_m *Ranker) GetUserScore(quizUser quiz.QuizUser) (int32, error) {
	ret := _m.Called(quizUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUserScore")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) (int32, error)); ok {
		return rf(quizUser)
	}
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) int32); ok {
		r0 = rf(quizUser)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(quiz.QuizUser) error); ok {
		r1 = rf(quizUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatus provides a mock function with given fields: quizUser
func (_m *Ranker) GetUserStatus(quizUser quiz.QuizUser) (*quiz.UserStatus, error) {
	ret := _m.Called(quizUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStatus")
	}

	var r0 *quiz.UserStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) (*quiz.UserStatus, error)); ok {
		return rf(quizUser)
	}
	if rf, ok := ret.Get(0).(func(quiz.QuizUser) *quiz.UserStatus); ok {
		r0 = rf(quizUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quiz.UserStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(quiz.QuizUser) error); ok {
		r1 = rf(quizUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserScore provides a mock function with given fields: quizUser, score
func (_m *Ranker) SetUserScore(quizUser quiz.QuizUser, score int32) error {
	ret := _m.Called(quizUser, score)

	if len(ret) == 0 {
		panic("no return value specified for SetUserScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(quiz.QuizUser, int32) error); ok {
		r0 = rf(quizUser, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserScore provides a mock function with given fields: quizUser, scoreDelta
func (_m *Ranker) UpdateUserScore(quizUser quiz.QuizUser, scoreDelta int32) (int32, error) {
	ret := _m.Called(quizUser, scoreDelta)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserScore")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(quiz.QuizUser, int32) (int32, error)); ok {
		return rf(quizUser, scoreDelta)
	}
	if rf, ok := ret.Get(0).(func(quiz.QuizUser, int32) int32); ok {
		r0 = rf(quizUser, scoreDelta)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(quiz.QuizUser, int32) error); ok {
		r1 = rf(quizUser, scoreDelta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRanker creates a new instance of Ranker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRanker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ranker {
	mock := &Ranker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
